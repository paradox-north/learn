创建虚拟环境：mkvirtualenv name --python=\usr\bin\python3   or
			python3.8 -m venv <name>
          #第一种 workon <name>激活    第二种 source <name>/bin/activate
在虚拟环境中安装django： pip install django  

虚拟环境中创建项目： django-admin.py startproject project_name .
效果：会创建出下列dcd ictionary
<project>/
    manage.py
    <project>/
        __init__.py     #一个空文件，告诉python该目录为python软件包
        settings.py		#设置
        urls.py			#网站支持的url
        asgi.py			#
        wsgi.py			#

为项目创建数据库： python manage.py migrate

启动服务器：python manage.py runserver

创建应用程序：python manage.py startapp app_name
效果：
<app>/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py	#create the view according to the funcs inside

model.py创建模型model_name后，在setting.py中加入该模型
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'appwork',
]

然后
python manage.py makemigrations <appname>    //告诉django你的更改，得到反馈，类似暂存
python manage.py migrate   //提交更改，在数据库中创建模型表

记得在app/urls.py中加入app_name = <app_name>

class Question                                   //类的用法和函数，返回集？？？？
>>>Question.object.all()
返回一个queryset
Question.object.order_by(id)                     //这些东西的用法？？？？可以用Question.objext.get_object_or_404(Question, pk=question_id)
按照id排序，返回list
Question.object.fliter(id=1||question_text__startwith='what')
返回指定的key-value

python manage.py createsuperuser  //创建super用户
在<app>/admin.py中注册后才能显示
###################################################################
blog/admin.py
from django.contrib import admin
from .models import Blog_title, Blog_context

# Register your models here.
admin.site.register(Blog_context)
admin.site.register(Blog_title)
###################################################################
views.py中

###################################################################
<app>/models.py
from django.db import models

class Question(models.Model):
	question_text = models.CharField(max_length=200)
	pub_date = models.DateTimeField('data_published')

class Choice(models.Model):
	question = models.ForeignKey(Question, on_delete=models.CASCADE)
	choice_text=models.CharField(max_length=200)
	votes=models.IntegerField(default=0)
###################################################################

还有一个get_list_or_404()函数，其功能与get_object_or_404()一样，只是使用 filter()代替 get()。Http404如果列表为空，则引发 。

post表单：可能对数据造成修改

外键
ForeignKey:  //一对多和多对一都可以通过外键实现

定义
from django.db import models

# Create your models here.
class Category(models.Model):
    name = models.CharField(max_length=100)

class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    # 是由Category影响Article
    category = models.ForeignKey('Category',on_delete=models.CASCADE)
    
在Article的实例中可以通过category属性来操作对应的Category模型
如：
article = models.Article.object.first()
print(article.category.name)
return HttpResponse('successful')
这是因为Django为Article添加了一个“属性名_id”的字段（这里是category_id），这个字段就是外键，article.category实际上先通过category_id找到对应的数据，再提取Category表中的这条数据，形成一个模型
如果我们想找到Category某一个实例对应的所有Article实例，可以
articles = category.article_set.all()
这里，我们使用的是 <引用模型的模型名转化为小写_set> 来获取
但也可以自定以一个属性来获取,比如：
class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    # 是由Category影响Article
    category = models.ForeignKey('Category',on_delete=models.CASCADE, related_name='articles')  //这是在先前的Article类基础上增加了related_name参数
接下来只需要
articles = category.aticles.all()

添加数据到数句库中去
# 插入文章,Django推介的方式，也是最常用的
    article = models.Article(title='lala',content=333)
    category = models.Category.objects.get(pk=1)
    author = User.objects.get(pk=1)
    article.category = category
    article.author = author
    article.save()
# 不常用的插入数据方式
    article = models.Article(title='333',content='444')
    article.author = User.objects.first()
    article.save()   #article实例只有保存后才能被category添加
    category.articles.add(article, bulk=False)   #注意到，我们没有传入category这个外键的值
    category.save()
    
多对多：
ManyToManyField，以文章和标签为例进行讲解
我们在Article的models中添加一个模型
class Tag(model.Model):
    name = models.CharField(max_length=100)
    articles = models.ManyToManyField('Article')
这样，我们在Tag中添加了一个多对多的外键
#也可以在Article中添加外键
#tags = models.ManyToManyField('Tag')
之后makemigrations, migrate
在views.py中添加函数
def many_to_many(request):
    # 给第一篇文章添加一个标签
    article = models.Article.objects.first()
    tag = models.Tag(name='热门文章')
    # 先保存tag
    tag.save()
    # 再添加tag
    article.tag_set.add(tag)
更常用的方式是：
article = models.Article.object.first()
tag = models.Tag(name='热门文章')
article.tag_set.add(tag)
————————————————
版权声明：本文为CSDN博主「stu_xujin」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/xujin0/java/article/details/83592815
————————————————
############################################################################################################
<app>/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),     //获得路径''后，调用views.index函数，并别名为index
]
############################################################################################################
<project>/urls.py
from django.contirb import admin
from django.urls import include, path

urlpatterns = [
    path('<app>/', include('polls.urls')),    //include()引用其他的url
    path('admin/', admin.site.urls),
]
############################################################################################################
path()函数传递了4个参数(route,view,kwargs,name)



models.Model
CharField（max_length = None,**options) //小文本
	用TextInput输入
IntegerField(**options)
	input : NumberInput if "localize = False" else TextInput
TextField(**options)   //大文本
	input : Textarea
TimeField(auto_now=False, auto_now_add=False,**options)
	input : TextInput

	
ForeignKey(app.model, on_delete, **options)
	on_delete=models.CASCADE (一般情况下）
	
	
	
解决json数据中出现中文，显示unicode的问题：
def master(request):
    data = {'这是':'主页'}
    return  JsonResponse(data, json_dumps_params={'ensure_ascii':False})
原因：
JsonResponse()在初始化时使用json.dumps()把dict转为json格式
源码：
data = json.dumps(data, cls=encoder, **json_dumps_params)
而json.dumps()的源码表明，当ensure_ascii=False时，可以返回非ASCII码的值，否则会被json转义，也就是说，当含有中文的字典转json字符串的时候，需要把json.dumps（）的ensure_ascii改为False,即json.dumps(dict,ensure_ascii=False)
JsonResponse中有关键字json_dumps_params=None传参，所以json_dumps_params={'ensure_ascii'=False}

redirect,HttpResponseRedirect,reverse 用法
redirect
1、通过传递某个对象；该对象 get_absolute_url() 将调用方法以确定重定向URL:：
from django.shortcuts import redirect

def my_view(request):
    ...
    obj = MyModel.objects.get(...)
    return redirect(obj)
    
2、通过传递视图的名称和一些位置或关键字参数（可选）；将使用 reverse() 方法：
def my_view(request):
    ...
    return redirect('some-view-name', foo='bar')
